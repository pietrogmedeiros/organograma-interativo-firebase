// Variáveis globais
let colaboradoresData = [];
let currentHierarchyLevel = 'presidencia';
let currentSelectedPerson = null;
let navigationHistory = [];

// Função para garantir que o Google Charts está carregado
function ensureGoogleChartsLoaded() {
    return new Promise((resolve) => {
        if (window.google && window.google.charts) {
            resolve();
        } else {
            google.charts.load('current', { packages: ['orgchart'] });
            google.charts.setOnLoadCallback(resolve);
        }
    });
}



// Carregar dados iniciais
async function loadInitialData() {
    try {
        console.log('📊 Carregando dados locais...');
        
        // Carregar dados do arquivo output.json
        const response = await fetch('output.json');
        if (!response.ok) {
            throw new Error('Não foi possível carregar os dados');
        }
        
        colaboradoresData = await response.json();
        console.log(`✅ ${colaboradoresData.length} colaboradores carregados`);
        

        
        // Renderizar view inicial
        renderPresidenciaView();
        
    } catch (error) {
        console.error('❌ Erro ao carregar dados:', error);
        setErrorState('Erro ao carregar dados: ' + error.message);
    }
}





// Renderizar view da presidência
function renderPresidenciaView() {
    console.log('🎯 Renderizando view da presidência');
    
    const container = document.getElementById('chart-container');
    if (!container) return;
    
    container.innerHTML = '';
    
    const title = document.createElement('h2');
    title.textContent = 'Presidência';
    title.style.cssText = `
        text-align: center;
        margin: 0 0 40px 0;
        font-size: 32px;
        font-weight: 700;
        color: #1e40af;
    `;
    container.appendChild(title);
    
    // Buscar presidente
    const presidente = colaboradoresData.find(col => {
        const cargo = (col.Cargo || '').toLowerCase();
        return cargo.includes('presidente');
    });
    
    // Buscar diretores
    const diretores = colaboradoresData.filter(col => {
        const cargo = (col.Cargo || '').toLowerCase();
        return cargo.includes('diretor') || cargo.includes('diretora');
    });
    
    console.log(`👔 Diretores encontrados: ${diretores.length}`, diretores);
    
    // Card da Presidente (se encontrada)
    if (presidente) {
                        const presidenteContainer = document.createElement('div');
                presidenteContainer.style.cssText = `
                    display: flex;
                    justify-content: center;
                    margin-bottom: 30px;
                `;
        
                            const presidenteCard = document.createElement('div');
                    presidenteCard.style.cssText = `
                        background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
                        color: white;
                        border-radius: 20px;
                        padding: 20px;
                        text-align: center;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 8px 30px rgba(96, 165, 250, 0.4);
                        max-width: 300px;
                        width: 100%;
                    `;
        
        const presidenteNome = document.createElement('h3');
        presidenteNome.textContent = presidente.Colaborador;
        presidenteNome.style.cssText = `
            font-size: 18px;
            font-weight: 700;
            margin: 0 0 8px 0;
        `;
        
        const presidenteCargo = document.createElement('p');
        presidenteCargo.textContent = presidente.Cargo;
        presidenteCargo.style.cssText = `
            font-size: 14px;
            font-weight: 600;
            margin: 0 0 6px 0;
            opacity: 0.95;
        `;
        
        const presidenteDept = document.createElement('p');
        presidenteDept.textContent = presidente.Departamento;
        presidenteDept.style.cssText = `
            font-size: 12px;
            opacity: 0.9;
            margin: 0;
        `;
        
        presidenteCard.appendChild(presidenteNome);
        presidenteCard.appendChild(presidenteCargo);
        presidenteCard.appendChild(presidenteDept);
        
        // Adicionar eventos de hover e clique
        presidenteCard.addEventListener('mouseenter', () => {
            presidenteCard.style.transform = 'translateY(-5px)';
            presidenteCard.style.boxShadow = '0 12px 35px rgba(96, 165, 250, 0.5)';
        });
        
        presidenteCard.addEventListener('mouseleave', () => {
            presidenteCard.style.transform = 'translateY(0)';
            presidenteCard.style.boxShadow = '0 8px 30px rgba(96, 165, 250, 0.4)';
        });
        
        presidenteCard.addEventListener('click', () => {
            navigateToNextLevel(presidente, 'presidente');
        });
        
        presidenteContainer.appendChild(presidenteCard);
        container.appendChild(presidenteContainer);
    }
    
    // Título dos diretores
    const diretoresTitle = document.createElement('h3');
    diretoresTitle.textContent = 'Diretores';
    diretoresTitle.style.cssText = `
        text-align: center;
        margin: 0 0 20px 0;
        font-size: 24px;
        font-weight: 600;
        color: #374151;
    `;
    container.appendChild(diretoresTitle);
    
    if (diretores.length === 0) {
        const noData = document.createElement('p');
        noData.textContent = 'Nenhum diretor encontrado.';
        noData.style.cssText = `
            text-align: center;
            color: #64748b;
            font-size: 16px;
            margin-top: 30px;
        `;
        container.appendChild(noData);
        return;
    }
    
    // Container dos diretores em layout horizontal
    const diretoresContainer = document.createElement('div');
    diretoresContainer.style.cssText = `
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        padding: 10px 0;
        max-width: 100%;
        margin: 0 auto;
        justify-content: center;
    `;
    
    diretores.forEach(diretor => {
        const diretorCard = document.createElement('div');
        diretorCard.style.cssText = `
            background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
            color: white;
            border-radius: 12px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            min-height: 120px;
            flex: 1;
            min-width: 180px;
            max-width: 200px;
        `;
        
        const diretorNome = document.createElement('h3');
        diretorNome.textContent = diretor.Colaborador;
        diretorNome.style.cssText = `
            font-size: 14px;
            font-weight: 700;
            margin: 0 0 6px 0;
            line-height: 1.2;
        `;
        
        const diretorCargo = document.createElement('p');
        diretorCargo.textContent = diretor.Cargo;
        diretorCargo.style.cssText = `
            font-size: 11px;
            font-weight: 600;
            margin: 0 0 4px 0;
            opacity: 0.9;
            line-height: 1.3;
        `;
        
        const diretorDept = document.createElement('p');
        diretorDept.textContent = diretor.Departamento;
        diretorDept.style.cssText = `
            font-size: 9px;
            opacity: 0.8;
            margin: 0;
            line-height: 1.2;
        `;
        
        diretorCard.appendChild(diretorNome);
        diretorCard.appendChild(diretorCargo);
        diretorCard.appendChild(diretorDept);
        
        // Adicionar eventos de hover e clique
        diretorCard.addEventListener('mouseenter', () => {
            diretorCard.style.transform = 'translateY(-3px)';
            diretorCard.style.boxShadow = '0 8px 25px rgba(59, 130, 246, 0.4)';
        });
        
        diretorCard.addEventListener('mouseleave', () => {
            diretorCard.style.transform = 'translateY(0)';
            diretorCard.style.boxShadow = '0 6px 20px rgba(59, 130, 246, 0.3)';
        });
        
        diretorCard.addEventListener('click', () => {
            navigateToNextLevel(diretor, 'diretor');
        });
        
        diretoresContainer.appendChild(diretorCard);
    });
    
    container.appendChild(diretoresContainer);
}

// Navegar para o próximo nível hierárquico
function navigateToNextLevel(person, currentLevel) {
    console.log('🎯 DEBUG navigateToNextLevel:', person.Colaborador, 'nível atual:', currentLevel);
    
    // Salvar estado atual no histórico
    navigationHistory.push({
        person: currentSelectedPerson,
        level: currentHierarchyLevel
    });
    
    console.log(`🎯 Estado atual: currentHierarchyLevel = ${currentHierarchyLevel}`);
    
    // Determinar próximo nível
    let nextLevel = getNextLevel(currentLevel);
    console.log('🎯 getNextLevel retornou:', nextLevel);
    
    if (nextLevel === 'auto') {
        nextLevel = detectNextLevel(person);
        console.log('🎯 detectNextLevel retornou:', nextLevel);
    }
    
    // Atualizar estado
    currentHierarchyLevel = nextLevel;
    currentSelectedPerson = person;
    console.log('🎯 Estado atualizado - currentHierarchyLevel:', currentHierarchyLevel);
    
    // Renderizar próximo nível
    renderHierarchyLevel(person, currentLevel);
}

// Determinar próximo nível baseado no nível atual
function getNextLevel(currentLevel) {
    console.log(`🎯 getNextLevel chamado com: ${currentLevel}`);
    const levelMap = {
        'presidencia': 'diretor',
        'diretor': 'auto', // Será determinado automaticamente
        'gerente': 'auto', // Será determinado automaticamente
        'coordenador': 'auto', // Será determinado automaticamente
        'supervisor': 'colaborador'
    };
    const result = levelMap[currentLevel] || 'colaborador';
    console.log(`🎯 getNextLevel retornando: ${result}`);
    return result;
}

// Detectar próximo nível dinamicamente
function detectNextLevel(person) {
    console.log('🔍 DEBUG detectNextLevel:', person.Colaborador);
    
    // Buscar todos os subordinados diretos
    const subordinados = colaboradoresData.filter(col => {
        const gestor = (col.Gestor || '').toLowerCase();
        const nomePessoa = person.Colaborador.toLowerCase();
        const match = gestor.includes(nomePessoa);
        console.log(`🔍 Comparando: "${gestor}" com "${nomePessoa}" = ${match}`);
        return match;
    });
    
    console.log('📊 Subordinados encontrados:', subordinados.length);
    subordinados.forEach((sub, i) => {
        console.log(`${i+1}. ${sub.Colaborador} - ${sub.Cargo} - Gestor: ${sub.Gestor}`);
    });
    
    if (subordinados.length === 0) {
        console.log('❌ Nenhum subordinado encontrado, retornando colaborador');
        return 'colaborador';
    }
    
    // Analisar cargos dos subordinados para determinar o próximo nível
    const cargos = subordinados.map(col => (col.Cargo || '').toLowerCase());
    console.log('🔍 Cargos dos subordinados:', cargos);
    
    // Verificar se há gerentes/heads
    const temGerentes = cargos.some(cargo => 
        cargo.includes('gerente') || 
        cargo.includes('head') || 
        cargo.includes('manager')
    );
    
    // Verificar se há coordenadores
    const temCoordenadores = cargos.some(cargo => 
        cargo.includes('coordenador') || 
        cargo.includes('coordinator')
    );
    
    // Verificar se há supervisores
    const temSupervisores = cargos.some(cargo => 
        cargo.includes('supervisor') || 
        cargo.includes('supervisora')
    );
    
    // Verificar se há diretores (caso raro, mas possível)
    const temDiretores = cargos.some(cargo => 
        cargo.includes('diretor') || 
        cargo.includes('diretora')
    );
    
    console.log('🔍 Análise de cargos:', {
        temDiretores,
        temGerentes,
        temCoordenadores,
        temSupervisores
    });
    
    // Seguir a hierarquia exata: Diretores > Gerentes > Coordenadores > Supervisores > Colaboradores
    if (temDiretores) {
        console.log('🎯 Retornando: diretor');
        return 'diretor';
    }
    if (temGerentes) {
        console.log('🎯 Retornando: gerente');
        return 'gerente';
    }
    if (temCoordenadores) {
        console.log('🎯 Retornando: coordenador');
        return 'coordenador';
    }
    if (temSupervisores) {
        console.log('🎯 Retornando: supervisor');
        return 'supervisor';
    }
    
    console.log('🎯 Retornando: colaborador (fallback)');
    return 'colaborador';
}

// Renderizar nível hierárquico
function renderHierarchyLevel(person, previousLevel) {
    console.log('🎯 DEBUG renderHierarchyLevel:', person.Colaborador, 'nível:', currentHierarchyLevel);
    
    const container = document.getElementById('chart-container');
    if (!container) {
        console.error('❌ Container não encontrado!');
        return;
    }
    
    // Limpar container
    container.innerHTML = '';
    
    // Adicionar breadcrumb
    addBreadcrumb(container);
    
    // Usar função genérica para renderizar qualquer nível
    console.log('🎯 Chamando renderSubordinadosView com nível:', currentHierarchyLevel);
    renderSubordinadosView(person, currentHierarchyLevel);
}

// Função genérica para renderizar qualquer nível
function renderSubordinadosView(pessoa, nivelAtual) {
    console.log('🎯 DEBUG renderSubordinadosView:', pessoa.Colaborador, 'nível:', nivelAtual);
    
    const container = document.getElementById('chart-container');
    if (!container) return;
    
    // Buscar subordinados diretos
    const subordinados = colaboradoresData.filter(col => {
        const gestor = (col.Gestor || '').toLowerCase();
        const nomePessoa = pessoa.Colaborador.toLowerCase();
        return gestor.includes(nomePessoa);
    });
    
    console.log(`📊 Subordinados encontrados: ${subordinados.length}`, subordinados);
    
    // Título genérico - mostrar todos os subordinados
    const title = document.createElement('h2');
    title.textContent = `Subordinados - ${pessoa.Colaborador}`;
    title.style.cssText = `
        text-align: center;
        margin: 0 0 30px 0;
        font-size: 28px;
        font-weight: 700;
        color: #1e40af;
    `;
    container.appendChild(title);
    
    // Card da pessoa atual (contexto)
    const pessoaCard = document.createElement('div');
    const cores = {
        'diretor': 'linear-gradient(135deg, #3b82f6 0%, #1e40af 100%)',
        'gerente': 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
        'coordenador': 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
        'supervisor': 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
        'colaborador': 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)'
    };
    
    pessoaCard.style.cssText = `
        background: ${cores[nivelAtual] || cores['colaborador']};
        color: white;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 30px;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    `;
    
    const pessoaNome = document.createElement('h3');
    pessoaNome.textContent = pessoa.Colaborador;
    pessoaNome.style.cssText = `
        font-size: 20px;
        font-weight: 700;
        margin: 0 0 8px 0;
    `;
    
    const pessoaCargo = document.createElement('p');
    pessoaCargo.textContent = pessoa.Cargo;
    pessoaCargo.style.cssText = `
        font-size: 14px;
        font-weight: 600;
        margin: 0;
        opacity: 0.9;
    `;
    
    pessoaCard.appendChild(pessoaNome);
    pessoaCard.appendChild(pessoaCargo);
    container.appendChild(pessoaCard);
    
    if (subordinados.length === 0) {
        const noData = document.createElement('p');
        noData.textContent = `Nenhum subordinado encontrado para ${pessoa.Colaborador}.`;
        noData.style.cssText = `
            text-align: center;
            color: #64748b;
            font-size: 16px;
            margin-top: 30px;
        `;
        container.appendChild(noData);
        return;
    }
    
    // Agrupar subordinados por tipo de cargo
    const diretores = subordinados.filter(col => {
        const cargo = (col.Cargo || '').toLowerCase();
        return cargo.includes('diretor') || cargo.includes('diretora');
    });
    
    const gerentes = subordinados.filter(col => {
        const cargo = (col.Cargo || '').toLowerCase();
        return cargo.includes('gerente') || cargo.includes('head') || cargo.includes('manager');
    });
    
    const coordenadores = subordinados.filter(col => {
        const cargo = (col.Cargo || '').toLowerCase();
        return cargo.includes('coordenador') || cargo.includes('coordinator');
    });
    
    const supervisores = subordinados.filter(col => {
        const cargo = (col.Cargo || '').toLowerCase();
        return cargo.includes('supervisor') || cargo.includes('supervisora');
    });
    
    const colaboradores = subordinados.filter(col => {
        const cargo = (col.Cargo || '').toLowerCase();
        return !cargo.includes('diretor') && 
               !cargo.includes('gerente') && 
               !cargo.includes('head') && 
               !cargo.includes('manager') &&
               !cargo.includes('coordenador') && 
               !cargo.includes('coordinator') &&
               !cargo.includes('supervisor') && 
               !cargo.includes('supervisora');
    });
    
    // Renderizar cada grupo em ordem hierárquica
    if (diretores.length > 0) {
        renderGrupoSubordinados(container, diretores, 'diretor', pessoa);
    }
    
    if (gerentes.length > 0) {
        renderGrupoSubordinados(container, gerentes, 'gerente', pessoa);
    }
    
    if (coordenadores.length > 0) {
        renderGrupoSubordinados(container, coordenadores, 'coordenador', pessoa);
    }
    
    if (supervisores.length > 0) {
        renderGrupoSubordinados(container, supervisores, 'supervisor', pessoa);
    }
    
    if (colaboradores.length > 0) {
        renderGrupoSubordinados(container, colaboradores, 'colaborador', pessoa);
    }
}

// Renderizar grupo de subordinados
function renderGrupoSubordinados(container, subordinados, tipo, gestor) {
    const titulos = {
        'diretor': 'Diretores',
        'gerente': 'Gerentes',
        'coordenador': 'Coordenadores',
        'supervisor': 'Supervisores',
        'colaborador': 'Colaboradores'
    };
    
    const titulo = document.createElement('h3');
    titulo.textContent = titulos[tipo];
    titulo.style.cssText = `
        font-size: 20px;
        font-weight: 600;
        color: #374151;
        margin: 30px 0 15px 0;
        text-align: center;
    `;
    container.appendChild(titulo);
    
    const subordinadosContainer = document.createElement('div');
    
    // Aplicar classe CSS específica baseada no tipo
    if (tipo === "coordenador") {
        subordinadosContainer.className = "coordenadores-section";
        subordinadosContainer.setAttribute("data-count", subordinados.length.toString());
    } else if (tipo === "gerente") {
        subordinadosContainer.className = "gerentes-section";
        subordinadosContainer.setAttribute("data-count", subordinados.length.toString());
    } else if (tipo === 'colaborador') {
        // Configuração especial para colaboradores (grid mais compacto e sempre centralizado)
        subordinadosContainer.style.cssText = `
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            padding: 20px 0;
            justify-items: center;
            justify-content: center;
            max-width: 100%;
        `;
    } else if (tipo === 'supervisor') {
        // Configuração especial para supervisores (melhor centralização)
        subordinadosContainer.style.cssText = `
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 20px 0;
            justify-items: center;
            max-width: 800px;
            margin: 0 auto;
        `;
    } else {
        subordinadosContainer.style.cssText = `
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 20px 0;
        `;
    }    return levelMap[currentLevel] || 'presidencia';
}

// Criar card de colaborador
function createColaboradorCard(colaborador, tipo) {
    const nome = (colaborador.Colaborador || colaborador.Nome || colaborador['Nome do Colaborador'] || '').trim();
    const cargo = (colaborador.Cargo || '').trim();
    const departamento = (colaborador.Departamento || '').trim();
    
    const card = document.createElement('div');
    card.className = `colaborador-card ${tipo}-card`;
    
    // Definir estilos baseados no tipo
    let cardStyles, nomeStyles, cargoStyles, deptStyles, hoverShadow;
    
    switch(tipo) {
        case 'gerente':
            cardStyles = `
                min-width: 220px;
                max-width: 280px;
                padding: 18px;
                background: linear-gradient(135deg, #eff6ff, #dbeafe);
                border: 3px solid #3b82f6;
                box-shadow: 0 6px 16px rgba(59, 130, 246, 0.25);
                border-radius: 12px;
                text-align: center;
                transition: all 0.3s ease;
                cursor: pointer;
            `;
            nomeStyles = `
                font-weight: 700;
                font-size: 15px;
                color: #1e40af;
                margin-bottom: 8px;
                line-height: 1.2;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            cargoStyles = `
                font-size: 13px;
                color: #3730a3;
                font-weight: 600;
                line-height: 1.3;
                margin-bottom: 6px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            deptStyles = `
                font-size: 11px;
                color: #6366f1;
                font-weight: 500;
                line-height: 1.2;
                padding: 3px 8px;
                background: rgba(99, 102, 241, 0.1);
                border-radius: 6px;
                margin-top: 6px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            hoverShadow = '0 8px 24px rgba(59, 130, 246, 0.35)';
            break;
            
        case 'coordenador':
            cardStyles = `
                min-width: 200px;
                max-width: 250px;
                padding: 16px;
                background: linear-gradient(135deg, #f0fdfa, #ccfbf1);
                border: 2px solid #06b6d4;
                box-shadow: 0 4px 14px rgba(6, 182, 212, 0.2);
                border-radius: 10px;
                text-align: center;
                transition: all 0.3s ease;
                cursor: pointer;
            `;
            nomeStyles = `
                font-weight: 700;
                font-size: 14px;
                color: #0f766e;
                margin-bottom: 6px;
                line-height: 1.2;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            cargoStyles = `
                font-size: 12px;
                color: #0d9488;
                font-weight: 600;
                line-height: 1.3;
                margin-bottom: 4px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            deptStyles = `
                font-size: 10px;
                color: #0891b2;
                font-weight: 500;
                line-height: 1.2;
                padding: 2px 6px;
                background: rgba(6, 182, 212, 0.1);
                border-radius: 4px;
                margin-top: 4px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            hoverShadow = '0 6px 20px rgba(6, 182, 212, 0.3)';
            break;
            
        case 'supervisor':
            cardStyles = `
                min-width: 180px;
                max-width: 220px;
                padding: 14px;
                background: linear-gradient(135deg, #fefce8, #fef3c7);
                border: 2px solid #f59e0b;
                box-shadow: 0 4px 12px rgba(245, 158, 11, 0.2);
                border-radius: 9px;
                text-align: center;
                transition: all 0.3s ease;
                cursor: pointer;
            `;
            nomeStyles = `
                font-weight: 600;
                font-size: 13px;
                color: #92400e;
                margin-bottom: 6px;
                line-height: 1.2;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            cargoStyles = `
                font-size: 11px;
                color: #a16207;
                font-weight: 500;
                line-height: 1.3;
                margin-bottom: 4px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            deptStyles = `
                font-size: 9px;
                color: #d97706;
                font-weight: 500;
                line-height: 1.2;
                padding: 2px 6px;
                background: rgba(245, 158, 11, 0.1);
                border-radius: 4px;
                margin-top: 4px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            hoverShadow = '0 5px 18px rgba(245, 158, 11, 0.3)';
            break;
            
        case 'colaborador':
            cardStyles = `
                min-width: 180px;
                max-width: 220px;
                padding: 12px;
                background: linear-gradient(135deg, #f9fafb, #f3f4f6);
                border: 2px solid #d1d5db;
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
                border-radius: 8px;
                text-align: center;
                transition: all 0.3s ease;
                cursor: pointer;
                height: 100%;
                display: flex;
                flex-direction: column;
                justify-content: center;
                min-height: 120px;
            `;
            nomeStyles = `
                font-weight: 600;
                font-size: 11px;
                color: #374151;
                margin-bottom: 3px;
                line-height: 1.2;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            cargoStyles = `
                font-size: 9px;
                color: #6b7280;
                font-weight: 500;
                line-height: 1.3;
                margin-bottom: 2px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            deptStyles = `
                font-size: 7px;
                color: #9ca3af;
                font-weight: 500;
                line-height: 1.2;
                padding: 1px 3px;
                background: rgba(156, 163, 175, 0.1);
                border-radius: 2px;
                margin-top: 2px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            hoverShadow = '0 4px 15px rgba(0, 0, 0, 0.15)';
            break;
            
        default:
            cardStyles = `
                min-width: 200px;
                max-width: 250px;
                padding: 16px;
                background: white;
                border: 2px solid #e5e7eb;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                border-radius: 10px;
                text-align: center;
                transition: all 0.3s ease;
                cursor: pointer;
            `;
            nomeStyles = `
                font-weight: 600;
                font-size: 14px;
                color: #1f2937;
                margin-bottom: 6px;
                line-height: 1.2;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            cargoStyles = `
                font-size: 12px;
                color: #6b7280;
                font-weight: 500;
                line-height: 1.3;
                margin-bottom: 4px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            deptStyles = `
                font-size: 10px;
                color: #9ca3af;
                font-weight: 500;
                line-height: 1.2;
                padding: 2px 6px;
                background: rgba(156, 163, 175, 0.1);
                border-radius: 4px;
                margin-top: 4px;
                word-wrap: break-word;
                overflow-wrap: break-word;
            `;
            hoverShadow = '0 6px 18px rgba(0, 0, 0, 0.15)';
    }
    
    card.style.cssText = cardStyles;
    
    const nomeElement = document.createElement('h3');
    nomeElement.textContent = nome;
    nomeElement.style.cssText = nomeStyles;
    
    const cargoElement = document.createElement('p');
    cargoElement.textContent = cargo;
    cargoElement.style.cssText = cargoStyles;
    
    const deptElement = document.createElement('p');
    deptElement.textContent = departamento;
    deptElement.style.cssText = deptStyles;
    
    card.appendChild(nomeElement);
    card.appendChild(cargoElement);
    card.appendChild(deptElement);
    
    return card;
}

// Criar visualização hierárquica
function createHierarchicalView(container, colaboradores, deptName) {
    const title = document.createElement('h3');
    title.textContent = `Estrutura Hierárquica - ${deptName}`;
    title.style.cssText = `
        text-align: center;
        margin: 20px 0;
        font-size: 20px;
        font-weight: 600;
        color: #374151;
    `;
    container.appendChild(title);
    
    // Função para determinar prioridade do cargo
    const getPriority = (cargo) => {
        const cargoLower = cargo.toLowerCase();
        if (cargoLower.includes('diretor')) return 1;
        if (cargoLower.includes('gerente') || cargoLower.includes('head') || cargoLower.includes('manager')) return 2;
        if (cargoLower.includes('coordenador') || cargoLower.includes('coordinator')) return 3;
        if (cargoLower.includes('supervisor')) return 4;
        return 5; // colaboradores
    };
    
    // Ordenar colaboradores por prioridade
    const sortedColaboradores = colaboradores.sort((a, b) => {
        return getPriority(a.Cargo) - getPriority(b.Cargo);
    });
    
    // Criar visualização em cards
    const cardsContainer = document.createElement('div');
    cardsContainer.style.cssText = `
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        padding: 20px 0;
    `;
    
    sortedColaboradores.forEach(colaborador => {
        const card = createColaboradorCard(colaborador, 'default');
        cardsContainer.appendChild(card);
    });
    
    container.appendChild(cardsContainer);
}



function setLoadingState(message) {
    const container = document.getElementById('chart-container');
    if (container) {
        container.innerHTML = `<div style="text-align: center; padding: 40px; color: #64748b;">${message}</div>`;
    }
}

function setErrorState(message) {
    const container = document.getElementById('chart-container');
    if (container) {
        container.innerHTML = `<div style="text-align: center; padding: 40px; color: #dc2626;">❌ ${message}</div>`;
    }
}

function setReadyState(message) {
    const container = document.getElementById('chart-container');
    if (container) {
        container.innerHTML = `<div style="text-align: center; padding: 40px; color: #059669;">✅ ${message}</div>`;
    }
}

// Função para fazer logout
// Adicionar breadcrumb
function addBreadcrumb(container) {
    const breadcrumb = document.createElement('div');
    breadcrumb.style.cssText = `
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
        padding: 15px;
        background: #f8fafc;
        border-radius: 8px;
        border: 1px solid #e2e8f0;
    `;
    
    const backButton = document.createElement('button');
    backButton.textContent = '← Voltar';
    backButton.style.cssText = `
        background: #3b82f6;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: background 0.2s;
    `;
    
    backButton.addEventListener('mouseenter', () => {
        backButton.style.background = '#2563eb';
    });
    
    backButton.addEventListener('mouseleave', () => {
        backButton.style.background = '#3b82f6';
    });
    
    backButton.addEventListener('click', goBack);
    
    const path = document.createElement('span');
    path.textContent = `Presidência > ${currentSelectedPerson ? currentSelectedPerson.Colaborador : ''}`;
    path.style.cssText = `
        color: #64748b;
        font-size: 14px;
    `;
    
    breadcrumb.appendChild(backButton);
    breadcrumb.appendChild(path);
    container.appendChild(breadcrumb);
}

// Voltar para nível anterior
function goBack() {
    if (navigationHistory.length === 0) {
        // Se não há histórico, voltar para a presidência
        loadInitialData();
        return;
    }
    
    const previousLevel = navigationHistory.pop();
    currentSelectedPerson = previousLevel.person;
    currentHierarchyLevel = previousLevel.level;
    
    console.log('⬅️ Voltando para:', currentSelectedPerson.Colaborador, 'nível:', currentHierarchyLevel);
    
    renderHierarchyLevel(currentSelectedPerson, currentHierarchyLevel);
}

function handleLogout() {
    console.log('🚪 Fazendo logout...');
    
    // Limpar dados da sessão (se houver)
    sessionStorage.clear();
    localStorage.removeItem('user');
    
    // Mostrar mensagem de confirmação
    if (confirm('Tem certeza que deseja sair?')) {
        // Redirecionar para a página de login
        window.location.href = 'login.html';
    }
}

// Função para verificar se o usuário está logado
function checkAuthStatus() {
    // Verificar se há dados de usuário no localStorage
    const user = localStorage.getItem('user');
    if (!user) {
        console.log('🔒 Usuário não autenticado, redirecionando para login...');
        window.location.href = 'login.html';
        return false;
    }
    return true;
}

// Inicializar aplicação
document.addEventListener('DOMContentLoaded', async () => {
    console.log('🚀 Inicializando aplicação...');
    
    // Verificar se o usuário está autenticado
    if (!checkAuthStatus()) {
        return; // Para a execução se não estiver autenticado
    }
    
    // Garantir que o Google Charts está carregado
    await ensureGoogleChartsLoaded();
    
    // Configurar botão de logout
    const logoutButton = document.getElementById('btn-logout');
    if (logoutButton) {
        logoutButton.addEventListener('click', handleLogout);
        console.log('🔗 Botão de logout configurado');
    }
    
    // Carregar dados
    await loadInitialData();
    
    console.log('✅ Aplicação inicializada com sucesso!');
}); 